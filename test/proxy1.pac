//Proxy.pac file generated by autoProxy 15:47:28 GMT+0800 (中国标准时间)

var DIRECT = 'DIRECT';
var PROXY = 'PROXY 127.0.0.1:10087';

var HashMap = function(capacity) {
	var hash_table_length = capacity || 8;
	var hash_table = new Array(hash_table_length);
	var total_size = 0;
	this.put = function(key, value) {
		if (key != null) {
			var hash = hashCode(key);
			var index = indexFor(hash, hash_table.length);
			for (var obj = hash_table[index]; obj != null; obj = obj.next) {
				if (obj.hash == hash && obj.key == key) {
					obj.value = value;
					return obj.value;
				}
			}
			addEntry(hash, key, value, index);
		}
		return false;
	};

	this.get = function(key) {
		if (key != null) {
			var hash = hashCode(key);
			var index = indexFor(hash, hash_table.length);
			for (var obj = hash_table[index]; obj != null; obj = obj.next) {
				if (obj.hash == hash && obj.key == key) {
					return obj.value;
				}
			}
		}
		return null;
	};

	this.containsKey = function(key) {
		if (key != null) {
			var hash = hashCode(key);
			var index = indexFor(hash, hash_table.length);
			for (var obj = hash_table[index]; obj != null; obj = obj.next) {
				if (obj.hash == hash && obj.key == key) {
					return true;
				}
			}
		}
		return false;
	};

	var addEntry = function(hash, key, value, index) {
		var entry = hash_table[index];
		var item = {
			"hash": hash,
			"key": key,
			"value": value,
			"next": entry
		};
		hash_table[index] = item;
		total_size++;
		if (total_size > hash_table)
			rehash();
	};

	var indexFor = function(hash, length) {
		return hash & (length - 1);
	};

	var hashCode = function(key) {
		var h = 0,
			off = 0;
		var length = key.length;
		for (var i = 0; i < length; i++) {
			var temp = key.charCodeAt(off++);
			h = 31 * h + temp;
			if (h > 0x7fffffff || h < 0x80000000) {
				h = h & 0xffffffff;
			}
		}
		h ^= (h >>> 20) ^ (h >>> 12);
		return h ^ (h >>> 7) ^ (h >>> 4);
	};

	var rehash = function() {
		var oldHashTable = hash_table;
		hash_table = new Array(oldHashTable.length + hash_table_length);
		for (var i = 0, c = oldHashTable.length; i < c; i++) {
			var e = oldHashTable[i];
			while (e) {
				this.put(e.key, e.value);
				e = e.next;
			}
		}
	};
};

var hm = new HashMap(10000);
hm.put('www.baidu.com', PROXY);


function FindProxyForURL(url, host) {
	var type = hm.get(host);
	if (type) {
		return type;
	}
	return DIRECT;
};